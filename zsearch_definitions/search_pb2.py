# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: search.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import anonstore_pb2 as anonstore__pb2
import hoststore_pb2 as hoststore__pb2
import rpc_pb2 as rpc__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='search.proto',
  package='zsearch',
  syntax='proto3',
  serialized_pb=_b('\n\x0csearch.proto\x12\x07zsearch\x1a\x0f\x61nonstore.proto\x1a\x0fhoststore.proto\x1a\trpc.proto2\x94\n\n\x0c\x41\x64minService\x12\x35\n\x08Shutdown\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x33\n\x06Status\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x37\n\nStatistics\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x36\n\tPruneIPv4\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x38\n\x0bPruneDomain\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x39\n\x0cUpdateASData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12?\n\x12UpdateLocationData\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14ValidateCertificates\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14\x46ixCertificateSource\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpIPv4ToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12=\n\x10\x44umpDomainToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x43\n\x16\x44umpCertificatesToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12;\n\x0e\x44umpKeysToJSON\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x41\n\x14RegenerateIPv4Deltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12\x43\n\x16RegenerateDomainDeltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12H\n\x1bRegenerateCertificateDeltas\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12T\n RegenerateSingleCertificateDelta\x12\x17.zsearch.AnonymousQuery\x1a\x15.zsearch.CommandReply\"\x00\x12\x42\n\x15ReprocessCertificates\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x12N\n\x1aReprocessSingleCertificate\x12\x17.zsearch.AnonymousQuery\x1a\x15.zsearch.CommandReply\"\x00\x12\x31\n\x04Ping\x12\x10.zsearch.Command\x1a\x15.zsearch.CommandReply\"\x00\x32\x8b\x0b\n\x0cQueryService\x12\x45\n\x11GetHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x36\n\x11PutHostIPv4Record\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12\x39\n\x11\x44\x65lHostIPv4Record\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12\x45\n\x11GetAllIPv4Records\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x38\n\x10GetHostIPv4Delta\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12G\n\x13GetHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12\x38\n\x13PutHostDomainRecord\x12\x0f.zsearch.Record\x1a\x0e.zsearch.Delta\"\x00\x12;\n\x13\x44\x65lHostDomainRecord\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12G\n\x13GetAllDomainRecords\x12\x12.zsearch.HostQuery\x1a\x1a.zsearch.HostQueryResponse\"\x00\x12:\n\x12GetHostDomainDelta\x12\x12.zsearch.HostQuery\x1a\x0e.zsearch.Delta\"\x00\x12L\n\x0eGetCertificate\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12H\n\x11UpsertCertificate\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12K\n\x14UpsertRawCertificate\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12Q\n\x13GetCryptographicKey\x12\x17.zsearch.AnonymousQuery\x1a\x1f.zsearch.AnonymousQueryResponse\"\x00\x12M\n\x16UpsertCryptographicKey\x12\x18.zsearch.AnonymousRecord\x1a\x17.zsearch.AnonymousDelta\"\x00\x12@\n\x11GetPublicLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x44\n\x15GetRestrictedLocation\x12\x12.zsearch.HostQuery\x1a\x15.zsearch.LocationAtom\"\x00\x12\x31\n\x08GetWHOIS\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12\x38\n\x0fGetUserMetadata\x12\x12.zsearch.HostQuery\x1a\x0f.zsearch.Record\"\x00\x12;\n\x0fPutUserMetadata\x12\x0f.zsearch.Record\x1a\x15.zsearch.CommandReply\"\x00\x12\x42\n\x0cGetRootStore\x12\x17.zsearch.RootStoreQuery\x1a\x17.zsearch.RootStoreReply\"\x00\x62\x06proto3')
  ,
  dependencies=[anonstore__pb2.DESCRIPTOR,hoststore__pb2.DESCRIPTOR,rpc__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class AdminServiceStub(object):
    """Two gRPC interfaces. One from

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Shutdown = channel.unary_unary(
          '/zsearch.AdminService/Shutdown',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.Status = channel.unary_unary(
          '/zsearch.AdminService/Status',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.Statistics = channel.unary_unary(
          '/zsearch.AdminService/Statistics',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.PruneIPv4 = channel.unary_unary(
          '/zsearch.AdminService/PruneIPv4',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.PruneDomain = channel.unary_unary(
          '/zsearch.AdminService/PruneDomain',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.UpdateASData = channel.unary_unary(
          '/zsearch.AdminService/UpdateASData',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.UpdateLocationData = channel.unary_unary(
          '/zsearch.AdminService/UpdateLocationData',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.ValidateCertificates = channel.unary_unary(
          '/zsearch.AdminService/ValidateCertificates',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.FixCertificateSource = channel.unary_unary(
          '/zsearch.AdminService/FixCertificateSource',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.DumpIPv4ToJSON = channel.unary_unary(
          '/zsearch.AdminService/DumpIPv4ToJSON',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.DumpDomainToJSON = channel.unary_unary(
          '/zsearch.AdminService/DumpDomainToJSON',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.DumpCertificatesToJSON = channel.unary_unary(
          '/zsearch.AdminService/DumpCertificatesToJSON',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.DumpKeysToJSON = channel.unary_unary(
          '/zsearch.AdminService/DumpKeysToJSON',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.RegenerateIPv4Deltas = channel.unary_unary(
          '/zsearch.AdminService/RegenerateIPv4Deltas',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.RegenerateDomainDeltas = channel.unary_unary(
          '/zsearch.AdminService/RegenerateDomainDeltas',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.RegenerateCertificateDeltas = channel.unary_unary(
          '/zsearch.AdminService/RegenerateCertificateDeltas',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.RegenerateSingleCertificateDelta = channel.unary_unary(
          '/zsearch.AdminService/RegenerateSingleCertificateDelta',
          request_serializer=rpc__pb2.AnonymousQuery.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.ReprocessCertificates = channel.unary_unary(
          '/zsearch.AdminService/ReprocessCertificates',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.ReprocessSingleCertificate = channel.unary_unary(
          '/zsearch.AdminService/ReprocessSingleCertificate',
          request_serializer=rpc__pb2.AnonymousQuery.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.Ping = channel.unary_unary(
          '/zsearch.AdminService/Ping',
          request_serializer=rpc__pb2.Command.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )


  class AdminServiceServicer(object):
    """Two gRPC interfaces. One from

    """

    def Shutdown(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Statistics(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PruneIPv4(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PruneDomain(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateASData(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpdateLocationData(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ValidateCertificates(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FixCertificateSource(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DumpIPv4ToJSON(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DumpDomainToJSON(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DumpCertificatesToJSON(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DumpKeysToJSON(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegenerateIPv4Deltas(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegenerateDomainDeltas(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegenerateCertificateDeltas(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegenerateSingleCertificateDelta(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ReprocessCertificates(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ReprocessSingleCertificate(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Shutdown': grpc.unary_unary_rpc_method_handler(
            servicer.Shutdown,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'Status': grpc.unary_unary_rpc_method_handler(
            servicer.Status,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'Statistics': grpc.unary_unary_rpc_method_handler(
            servicer.Statistics,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'PruneIPv4': grpc.unary_unary_rpc_method_handler(
            servicer.PruneIPv4,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'PruneDomain': grpc.unary_unary_rpc_method_handler(
            servicer.PruneDomain,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'UpdateASData': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateASData,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'UpdateLocationData': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateLocationData,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'ValidateCertificates': grpc.unary_unary_rpc_method_handler(
            servicer.ValidateCertificates,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'FixCertificateSource': grpc.unary_unary_rpc_method_handler(
            servicer.FixCertificateSource,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'DumpIPv4ToJSON': grpc.unary_unary_rpc_method_handler(
            servicer.DumpIPv4ToJSON,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'DumpDomainToJSON': grpc.unary_unary_rpc_method_handler(
            servicer.DumpDomainToJSON,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'DumpCertificatesToJSON': grpc.unary_unary_rpc_method_handler(
            servicer.DumpCertificatesToJSON,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'DumpKeysToJSON': grpc.unary_unary_rpc_method_handler(
            servicer.DumpKeysToJSON,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'RegenerateIPv4Deltas': grpc.unary_unary_rpc_method_handler(
            servicer.RegenerateIPv4Deltas,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'RegenerateDomainDeltas': grpc.unary_unary_rpc_method_handler(
            servicer.RegenerateDomainDeltas,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'RegenerateCertificateDeltas': grpc.unary_unary_rpc_method_handler(
            servicer.RegenerateCertificateDeltas,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'RegenerateSingleCertificateDelta': grpc.unary_unary_rpc_method_handler(
            servicer.RegenerateSingleCertificateDelta,
            request_deserializer=rpc__pb2.AnonymousQuery.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'ReprocessCertificates': grpc.unary_unary_rpc_method_handler(
            servicer.ReprocessCertificates,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'ReprocessSingleCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.ReprocessSingleCertificate,
            request_deserializer=rpc__pb2.AnonymousQuery.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=rpc__pb2.Command.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'zsearch.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class QueryServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetHostIPv4Record = channel.unary_unary(
          '/zsearch.QueryService/GetHostIPv4Record',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=rpc__pb2.HostQueryResponse.FromString,
          )
      self.PutHostIPv4Record = channel.unary_unary(
          '/zsearch.QueryService/PutHostIPv4Record',
          request_serializer=hoststore__pb2.Record.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.DelHostIPv4Record = channel.unary_unary(
          '/zsearch.QueryService/DelHostIPv4Record',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.GetAllIPv4Records = channel.unary_unary(
          '/zsearch.QueryService/GetAllIPv4Records',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=rpc__pb2.HostQueryResponse.FromString,
          )
      self.GetHostIPv4Delta = channel.unary_unary(
          '/zsearch.QueryService/GetHostIPv4Delta',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.GetHostDomainRecord = channel.unary_unary(
          '/zsearch.QueryService/GetHostDomainRecord',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=rpc__pb2.HostQueryResponse.FromString,
          )
      self.PutHostDomainRecord = channel.unary_unary(
          '/zsearch.QueryService/PutHostDomainRecord',
          request_serializer=hoststore__pb2.Record.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.DelHostDomainRecord = channel.unary_unary(
          '/zsearch.QueryService/DelHostDomainRecord',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.GetAllDomainRecords = channel.unary_unary(
          '/zsearch.QueryService/GetAllDomainRecords',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=rpc__pb2.HostQueryResponse.FromString,
          )
      self.GetHostDomainDelta = channel.unary_unary(
          '/zsearch.QueryService/GetHostDomainDelta',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Delta.FromString,
          )
      self.GetCertificate = channel.unary_unary(
          '/zsearch.QueryService/GetCertificate',
          request_serializer=rpc__pb2.AnonymousQuery.SerializeToString,
          response_deserializer=rpc__pb2.AnonymousQueryResponse.FromString,
          )
      self.UpsertCertificate = channel.unary_unary(
          '/zsearch.QueryService/UpsertCertificate',
          request_serializer=anonstore__pb2.AnonymousRecord.SerializeToString,
          response_deserializer=anonstore__pb2.AnonymousDelta.FromString,
          )
      self.UpsertRawCertificate = channel.unary_unary(
          '/zsearch.QueryService/UpsertRawCertificate',
          request_serializer=anonstore__pb2.AnonymousRecord.SerializeToString,
          response_deserializer=anonstore__pb2.AnonymousDelta.FromString,
          )
      self.GetCryptographicKey = channel.unary_unary(
          '/zsearch.QueryService/GetCryptographicKey',
          request_serializer=rpc__pb2.AnonymousQuery.SerializeToString,
          response_deserializer=rpc__pb2.AnonymousQueryResponse.FromString,
          )
      self.UpsertCryptographicKey = channel.unary_unary(
          '/zsearch.QueryService/UpsertCryptographicKey',
          request_serializer=anonstore__pb2.AnonymousRecord.SerializeToString,
          response_deserializer=anonstore__pb2.AnonymousDelta.FromString,
          )
      self.GetPublicLocation = channel.unary_unary(
          '/zsearch.QueryService/GetPublicLocation',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.LocationAtom.FromString,
          )
      self.GetRestrictedLocation = channel.unary_unary(
          '/zsearch.QueryService/GetRestrictedLocation',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.LocationAtom.FromString,
          )
      self.GetWHOIS = channel.unary_unary(
          '/zsearch.QueryService/GetWHOIS',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Record.FromString,
          )
      self.GetUserMetadata = channel.unary_unary(
          '/zsearch.QueryService/GetUserMetadata',
          request_serializer=rpc__pb2.HostQuery.SerializeToString,
          response_deserializer=hoststore__pb2.Record.FromString,
          )
      self.PutUserMetadata = channel.unary_unary(
          '/zsearch.QueryService/PutUserMetadata',
          request_serializer=hoststore__pb2.Record.SerializeToString,
          response_deserializer=rpc__pb2.CommandReply.FromString,
          )
      self.GetRootStore = channel.unary_unary(
          '/zsearch.QueryService/GetRootStore',
          request_serializer=rpc__pb2.RootStoreQuery.SerializeToString,
          response_deserializer=rpc__pb2.RootStoreReply.FromString,
          )


  class QueryServiceServicer(object):

    def GetHostIPv4Record(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PutHostIPv4Record(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DelHostIPv4Record(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetAllIPv4Records(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetHostIPv4Delta(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetHostDomainRecord(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PutHostDomainRecord(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DelHostDomainRecord(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetAllDomainRecords(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetHostDomainDelta(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCertificate(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpsertCertificate(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpsertRawCertificate(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetCryptographicKey(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def UpsertCryptographicKey(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetPublicLocation(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetRestrictedLocation(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetWHOIS(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetUserMetadata(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PutUserMetadata(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetRootStore(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetHostIPv4Record': grpc.unary_unary_rpc_method_handler(
            servicer.GetHostIPv4Record,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=rpc__pb2.HostQueryResponse.SerializeToString,
        ),
        'PutHostIPv4Record': grpc.unary_unary_rpc_method_handler(
            servicer.PutHostIPv4Record,
            request_deserializer=hoststore__pb2.Record.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'DelHostIPv4Record': grpc.unary_unary_rpc_method_handler(
            servicer.DelHostIPv4Record,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'GetAllIPv4Records': grpc.unary_unary_rpc_method_handler(
            servicer.GetAllIPv4Records,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=rpc__pb2.HostQueryResponse.SerializeToString,
        ),
        'GetHostIPv4Delta': grpc.unary_unary_rpc_method_handler(
            servicer.GetHostIPv4Delta,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'GetHostDomainRecord': grpc.unary_unary_rpc_method_handler(
            servicer.GetHostDomainRecord,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=rpc__pb2.HostQueryResponse.SerializeToString,
        ),
        'PutHostDomainRecord': grpc.unary_unary_rpc_method_handler(
            servicer.PutHostDomainRecord,
            request_deserializer=hoststore__pb2.Record.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'DelHostDomainRecord': grpc.unary_unary_rpc_method_handler(
            servicer.DelHostDomainRecord,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'GetAllDomainRecords': grpc.unary_unary_rpc_method_handler(
            servicer.GetAllDomainRecords,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=rpc__pb2.HostQueryResponse.SerializeToString,
        ),
        'GetHostDomainDelta': grpc.unary_unary_rpc_method_handler(
            servicer.GetHostDomainDelta,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Delta.SerializeToString,
        ),
        'GetCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.GetCertificate,
            request_deserializer=rpc__pb2.AnonymousQuery.FromString,
            response_serializer=rpc__pb2.AnonymousQueryResponse.SerializeToString,
        ),
        'UpsertCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.UpsertCertificate,
            request_deserializer=anonstore__pb2.AnonymousRecord.FromString,
            response_serializer=anonstore__pb2.AnonymousDelta.SerializeToString,
        ),
        'UpsertRawCertificate': grpc.unary_unary_rpc_method_handler(
            servicer.UpsertRawCertificate,
            request_deserializer=anonstore__pb2.AnonymousRecord.FromString,
            response_serializer=anonstore__pb2.AnonymousDelta.SerializeToString,
        ),
        'GetCryptographicKey': grpc.unary_unary_rpc_method_handler(
            servicer.GetCryptographicKey,
            request_deserializer=rpc__pb2.AnonymousQuery.FromString,
            response_serializer=rpc__pb2.AnonymousQueryResponse.SerializeToString,
        ),
        'UpsertCryptographicKey': grpc.unary_unary_rpc_method_handler(
            servicer.UpsertCryptographicKey,
            request_deserializer=anonstore__pb2.AnonymousRecord.FromString,
            response_serializer=anonstore__pb2.AnonymousDelta.SerializeToString,
        ),
        'GetPublicLocation': grpc.unary_unary_rpc_method_handler(
            servicer.GetPublicLocation,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.LocationAtom.SerializeToString,
        ),
        'GetRestrictedLocation': grpc.unary_unary_rpc_method_handler(
            servicer.GetRestrictedLocation,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.LocationAtom.SerializeToString,
        ),
        'GetWHOIS': grpc.unary_unary_rpc_method_handler(
            servicer.GetWHOIS,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Record.SerializeToString,
        ),
        'GetUserMetadata': grpc.unary_unary_rpc_method_handler(
            servicer.GetUserMetadata,
            request_deserializer=rpc__pb2.HostQuery.FromString,
            response_serializer=hoststore__pb2.Record.SerializeToString,
        ),
        'PutUserMetadata': grpc.unary_unary_rpc_method_handler(
            servicer.PutUserMetadata,
            request_deserializer=hoststore__pb2.Record.FromString,
            response_serializer=rpc__pb2.CommandReply.SerializeToString,
        ),
        'GetRootStore': grpc.unary_unary_rpc_method_handler(
            servicer.GetRootStore,
            request_deserializer=rpc__pb2.RootStoreQuery.FromString,
            response_serializer=rpc__pb2.RootStoreReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'zsearch.QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAdminServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Two gRPC interfaces. One from

    """
    def Shutdown(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Status(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Statistics(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PruneIPv4(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PruneDomain(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateASData(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpdateLocationData(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ValidateCertificates(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FixCertificateSource(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DumpIPv4ToJSON(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DumpDomainToJSON(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DumpCertificatesToJSON(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DumpKeysToJSON(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegenerateIPv4Deltas(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegenerateDomainDeltas(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegenerateCertificateDeltas(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegenerateSingleCertificateDelta(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ReprocessCertificates(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ReprocessSingleCertificate(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Ping(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAdminServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Two gRPC interfaces. One from

    """
    def Shutdown(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Shutdown.future = None
    def Status(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Status.future = None
    def Statistics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Statistics.future = None
    def PruneIPv4(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PruneIPv4.future = None
    def PruneDomain(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PruneDomain.future = None
    def UpdateASData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpdateASData.future = None
    def UpdateLocationData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpdateLocationData.future = None
    def ValidateCertificates(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ValidateCertificates.future = None
    def FixCertificateSource(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FixCertificateSource.future = None
    def DumpIPv4ToJSON(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DumpIPv4ToJSON.future = None
    def DumpDomainToJSON(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DumpDomainToJSON.future = None
    def DumpCertificatesToJSON(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DumpCertificatesToJSON.future = None
    def DumpKeysToJSON(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DumpKeysToJSON.future = None
    def RegenerateIPv4Deltas(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RegenerateIPv4Deltas.future = None
    def RegenerateDomainDeltas(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RegenerateDomainDeltas.future = None
    def RegenerateCertificateDeltas(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RegenerateCertificateDeltas.future = None
    def RegenerateSingleCertificateDelta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RegenerateSingleCertificateDelta.future = None
    def ReprocessCertificates(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ReprocessCertificates.future = None
    def ReprocessSingleCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ReprocessSingleCertificate.future = None
    def Ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Ping.future = None


  def beta_create_AdminService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('zsearch.AdminService', 'DumpCertificatesToJSON'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'DumpDomainToJSON'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'DumpIPv4ToJSON'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'DumpKeysToJSON'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'FixCertificateSource'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'Ping'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'PruneDomain'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'PruneIPv4'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'RegenerateCertificateDeltas'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'RegenerateDomainDeltas'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'RegenerateIPv4Deltas'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): rpc__pb2.AnonymousQuery.FromString,
      ('zsearch.AdminService', 'ReprocessCertificates'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'ReprocessSingleCertificate'): rpc__pb2.AnonymousQuery.FromString,
      ('zsearch.AdminService', 'Shutdown'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'Statistics'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'Status'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'UpdateASData'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'UpdateLocationData'): rpc__pb2.Command.FromString,
      ('zsearch.AdminService', 'ValidateCertificates'): rpc__pb2.Command.FromString,
    }
    response_serializers = {
      ('zsearch.AdminService', 'DumpCertificatesToJSON'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'DumpDomainToJSON'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'DumpIPv4ToJSON'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'DumpKeysToJSON'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'FixCertificateSource'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'Ping'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'PruneDomain'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'PruneIPv4'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'RegenerateCertificateDeltas'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'RegenerateDomainDeltas'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'RegenerateIPv4Deltas'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'ReprocessCertificates'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'ReprocessSingleCertificate'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'Shutdown'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'Statistics'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'Status'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'UpdateASData'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'UpdateLocationData'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.AdminService', 'ValidateCertificates'): rpc__pb2.CommandReply.SerializeToString,
    }
    method_implementations = {
      ('zsearch.AdminService', 'DumpCertificatesToJSON'): face_utilities.unary_unary_inline(servicer.DumpCertificatesToJSON),
      ('zsearch.AdminService', 'DumpDomainToJSON'): face_utilities.unary_unary_inline(servicer.DumpDomainToJSON),
      ('zsearch.AdminService', 'DumpIPv4ToJSON'): face_utilities.unary_unary_inline(servicer.DumpIPv4ToJSON),
      ('zsearch.AdminService', 'DumpKeysToJSON'): face_utilities.unary_unary_inline(servicer.DumpKeysToJSON),
      ('zsearch.AdminService', 'FixCertificateSource'): face_utilities.unary_unary_inline(servicer.FixCertificateSource),
      ('zsearch.AdminService', 'Ping'): face_utilities.unary_unary_inline(servicer.Ping),
      ('zsearch.AdminService', 'PruneDomain'): face_utilities.unary_unary_inline(servicer.PruneDomain),
      ('zsearch.AdminService', 'PruneIPv4'): face_utilities.unary_unary_inline(servicer.PruneIPv4),
      ('zsearch.AdminService', 'RegenerateCertificateDeltas'): face_utilities.unary_unary_inline(servicer.RegenerateCertificateDeltas),
      ('zsearch.AdminService', 'RegenerateDomainDeltas'): face_utilities.unary_unary_inline(servicer.RegenerateDomainDeltas),
      ('zsearch.AdminService', 'RegenerateIPv4Deltas'): face_utilities.unary_unary_inline(servicer.RegenerateIPv4Deltas),
      ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): face_utilities.unary_unary_inline(servicer.RegenerateSingleCertificateDelta),
      ('zsearch.AdminService', 'ReprocessCertificates'): face_utilities.unary_unary_inline(servicer.ReprocessCertificates),
      ('zsearch.AdminService', 'ReprocessSingleCertificate'): face_utilities.unary_unary_inline(servicer.ReprocessSingleCertificate),
      ('zsearch.AdminService', 'Shutdown'): face_utilities.unary_unary_inline(servicer.Shutdown),
      ('zsearch.AdminService', 'Statistics'): face_utilities.unary_unary_inline(servicer.Statistics),
      ('zsearch.AdminService', 'Status'): face_utilities.unary_unary_inline(servicer.Status),
      ('zsearch.AdminService', 'UpdateASData'): face_utilities.unary_unary_inline(servicer.UpdateASData),
      ('zsearch.AdminService', 'UpdateLocationData'): face_utilities.unary_unary_inline(servicer.UpdateLocationData),
      ('zsearch.AdminService', 'ValidateCertificates'): face_utilities.unary_unary_inline(servicer.ValidateCertificates),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AdminService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('zsearch.AdminService', 'DumpCertificatesToJSON'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'DumpDomainToJSON'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'DumpIPv4ToJSON'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'DumpKeysToJSON'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'FixCertificateSource'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'Ping'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'PruneDomain'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'PruneIPv4'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'RegenerateCertificateDeltas'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'RegenerateDomainDeltas'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'RegenerateIPv4Deltas'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): rpc__pb2.AnonymousQuery.SerializeToString,
      ('zsearch.AdminService', 'ReprocessCertificates'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'ReprocessSingleCertificate'): rpc__pb2.AnonymousQuery.SerializeToString,
      ('zsearch.AdminService', 'Shutdown'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'Statistics'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'Status'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'UpdateASData'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'UpdateLocationData'): rpc__pb2.Command.SerializeToString,
      ('zsearch.AdminService', 'ValidateCertificates'): rpc__pb2.Command.SerializeToString,
    }
    response_deserializers = {
      ('zsearch.AdminService', 'DumpCertificatesToJSON'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'DumpDomainToJSON'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'DumpIPv4ToJSON'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'DumpKeysToJSON'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'FixCertificateSource'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'Ping'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'PruneDomain'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'PruneIPv4'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'RegenerateCertificateDeltas'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'RegenerateDomainDeltas'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'RegenerateIPv4Deltas'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'RegenerateSingleCertificateDelta'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'ReprocessCertificates'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'ReprocessSingleCertificate'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'Shutdown'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'Statistics'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'Status'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'UpdateASData'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'UpdateLocationData'): rpc__pb2.CommandReply.FromString,
      ('zsearch.AdminService', 'ValidateCertificates'): rpc__pb2.CommandReply.FromString,
    }
    cardinalities = {
      'DumpCertificatesToJSON': cardinality.Cardinality.UNARY_UNARY,
      'DumpDomainToJSON': cardinality.Cardinality.UNARY_UNARY,
      'DumpIPv4ToJSON': cardinality.Cardinality.UNARY_UNARY,
      'DumpKeysToJSON': cardinality.Cardinality.UNARY_UNARY,
      'FixCertificateSource': cardinality.Cardinality.UNARY_UNARY,
      'Ping': cardinality.Cardinality.UNARY_UNARY,
      'PruneDomain': cardinality.Cardinality.UNARY_UNARY,
      'PruneIPv4': cardinality.Cardinality.UNARY_UNARY,
      'RegenerateCertificateDeltas': cardinality.Cardinality.UNARY_UNARY,
      'RegenerateDomainDeltas': cardinality.Cardinality.UNARY_UNARY,
      'RegenerateIPv4Deltas': cardinality.Cardinality.UNARY_UNARY,
      'RegenerateSingleCertificateDelta': cardinality.Cardinality.UNARY_UNARY,
      'ReprocessCertificates': cardinality.Cardinality.UNARY_UNARY,
      'ReprocessSingleCertificate': cardinality.Cardinality.UNARY_UNARY,
      'Shutdown': cardinality.Cardinality.UNARY_UNARY,
      'Statistics': cardinality.Cardinality.UNARY_UNARY,
      'Status': cardinality.Cardinality.UNARY_UNARY,
      'UpdateASData': cardinality.Cardinality.UNARY_UNARY,
      'UpdateLocationData': cardinality.Cardinality.UNARY_UNARY,
      'ValidateCertificates': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'zsearch.AdminService', cardinalities, options=stub_options)


  class BetaQueryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetHostIPv4Record(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PutHostIPv4Record(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DelHostIPv4Record(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetAllIPv4Records(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetHostIPv4Delta(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetHostDomainRecord(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PutHostDomainRecord(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DelHostDomainRecord(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetAllDomainRecords(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetHostDomainDelta(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCertificate(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpsertCertificate(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpsertRawCertificate(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetCryptographicKey(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def UpsertCryptographicKey(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetPublicLocation(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetRestrictedLocation(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetWHOIS(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetUserMetadata(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PutUserMetadata(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetRootStore(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaQueryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetHostIPv4Record(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetHostIPv4Record.future = None
    def PutHostIPv4Record(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PutHostIPv4Record.future = None
    def DelHostIPv4Record(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DelHostIPv4Record.future = None
    def GetAllIPv4Records(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetAllIPv4Records.future = None
    def GetHostIPv4Delta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetHostIPv4Delta.future = None
    def GetHostDomainRecord(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetHostDomainRecord.future = None
    def PutHostDomainRecord(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PutHostDomainRecord.future = None
    def DelHostDomainRecord(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    DelHostDomainRecord.future = None
    def GetAllDomainRecords(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetAllDomainRecords.future = None
    def GetHostDomainDelta(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetHostDomainDelta.future = None
    def GetCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetCertificate.future = None
    def UpsertCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpsertCertificate.future = None
    def UpsertRawCertificate(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpsertRawCertificate.future = None
    def GetCryptographicKey(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetCryptographicKey.future = None
    def UpsertCryptographicKey(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    UpsertCryptographicKey.future = None
    def GetPublicLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetPublicLocation.future = None
    def GetRestrictedLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetRestrictedLocation.future = None
    def GetWHOIS(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetWHOIS.future = None
    def GetUserMetadata(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetUserMetadata.future = None
    def PutUserMetadata(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PutUserMetadata.future = None
    def GetRootStore(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetRootStore.future = None


  def beta_create_QueryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('zsearch.QueryService', 'DelHostDomainRecord'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'DelHostIPv4Record'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetAllDomainRecords'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetAllIPv4Records'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetCertificate'): rpc__pb2.AnonymousQuery.FromString,
      ('zsearch.QueryService', 'GetCryptographicKey'): rpc__pb2.AnonymousQuery.FromString,
      ('zsearch.QueryService', 'GetHostDomainDelta'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetHostDomainRecord'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetHostIPv4Delta'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetHostIPv4Record'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetPublicLocation'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetRestrictedLocation'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetRootStore'): rpc__pb2.RootStoreQuery.FromString,
      ('zsearch.QueryService', 'GetUserMetadata'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'GetWHOIS'): rpc__pb2.HostQuery.FromString,
      ('zsearch.QueryService', 'PutHostDomainRecord'): hoststore__pb2.Record.FromString,
      ('zsearch.QueryService', 'PutHostIPv4Record'): hoststore__pb2.Record.FromString,
      ('zsearch.QueryService', 'PutUserMetadata'): hoststore__pb2.Record.FromString,
      ('zsearch.QueryService', 'UpsertCertificate'): anonstore__pb2.AnonymousRecord.FromString,
      ('zsearch.QueryService', 'UpsertCryptographicKey'): anonstore__pb2.AnonymousRecord.FromString,
      ('zsearch.QueryService', 'UpsertRawCertificate'): anonstore__pb2.AnonymousRecord.FromString,
    }
    response_serializers = {
      ('zsearch.QueryService', 'DelHostDomainRecord'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'DelHostIPv4Record'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'GetAllDomainRecords'): rpc__pb2.HostQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetAllIPv4Records'): rpc__pb2.HostQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetCertificate'): rpc__pb2.AnonymousQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetCryptographicKey'): rpc__pb2.AnonymousQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetHostDomainDelta'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'GetHostDomainRecord'): rpc__pb2.HostQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetHostIPv4Delta'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'GetHostIPv4Record'): rpc__pb2.HostQueryResponse.SerializeToString,
      ('zsearch.QueryService', 'GetPublicLocation'): hoststore__pb2.LocationAtom.SerializeToString,
      ('zsearch.QueryService', 'GetRestrictedLocation'): hoststore__pb2.LocationAtom.SerializeToString,
      ('zsearch.QueryService', 'GetRootStore'): rpc__pb2.RootStoreReply.SerializeToString,
      ('zsearch.QueryService', 'GetUserMetadata'): hoststore__pb2.Record.SerializeToString,
      ('zsearch.QueryService', 'GetWHOIS'): hoststore__pb2.Record.SerializeToString,
      ('zsearch.QueryService', 'PutHostDomainRecord'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'PutHostIPv4Record'): hoststore__pb2.Delta.SerializeToString,
      ('zsearch.QueryService', 'PutUserMetadata'): rpc__pb2.CommandReply.SerializeToString,
      ('zsearch.QueryService', 'UpsertCertificate'): anonstore__pb2.AnonymousDelta.SerializeToString,
      ('zsearch.QueryService', 'UpsertCryptographicKey'): anonstore__pb2.AnonymousDelta.SerializeToString,
      ('zsearch.QueryService', 'UpsertRawCertificate'): anonstore__pb2.AnonymousDelta.SerializeToString,
    }
    method_implementations = {
      ('zsearch.QueryService', 'DelHostDomainRecord'): face_utilities.unary_unary_inline(servicer.DelHostDomainRecord),
      ('zsearch.QueryService', 'DelHostIPv4Record'): face_utilities.unary_unary_inline(servicer.DelHostIPv4Record),
      ('zsearch.QueryService', 'GetAllDomainRecords'): face_utilities.unary_unary_inline(servicer.GetAllDomainRecords),
      ('zsearch.QueryService', 'GetAllIPv4Records'): face_utilities.unary_unary_inline(servicer.GetAllIPv4Records),
      ('zsearch.QueryService', 'GetCertificate'): face_utilities.unary_unary_inline(servicer.GetCertificate),
      ('zsearch.QueryService', 'GetCryptographicKey'): face_utilities.unary_unary_inline(servicer.GetCryptographicKey),
      ('zsearch.QueryService', 'GetHostDomainDelta'): face_utilities.unary_unary_inline(servicer.GetHostDomainDelta),
      ('zsearch.QueryService', 'GetHostDomainRecord'): face_utilities.unary_unary_inline(servicer.GetHostDomainRecord),
      ('zsearch.QueryService', 'GetHostIPv4Delta'): face_utilities.unary_unary_inline(servicer.GetHostIPv4Delta),
      ('zsearch.QueryService', 'GetHostIPv4Record'): face_utilities.unary_unary_inline(servicer.GetHostIPv4Record),
      ('zsearch.QueryService', 'GetPublicLocation'): face_utilities.unary_unary_inline(servicer.GetPublicLocation),
      ('zsearch.QueryService', 'GetRestrictedLocation'): face_utilities.unary_unary_inline(servicer.GetRestrictedLocation),
      ('zsearch.QueryService', 'GetRootStore'): face_utilities.unary_unary_inline(servicer.GetRootStore),
      ('zsearch.QueryService', 'GetUserMetadata'): face_utilities.unary_unary_inline(servicer.GetUserMetadata),
      ('zsearch.QueryService', 'GetWHOIS'): face_utilities.unary_unary_inline(servicer.GetWHOIS),
      ('zsearch.QueryService', 'PutHostDomainRecord'): face_utilities.unary_unary_inline(servicer.PutHostDomainRecord),
      ('zsearch.QueryService', 'PutHostIPv4Record'): face_utilities.unary_unary_inline(servicer.PutHostIPv4Record),
      ('zsearch.QueryService', 'PutUserMetadata'): face_utilities.unary_unary_inline(servicer.PutUserMetadata),
      ('zsearch.QueryService', 'UpsertCertificate'): face_utilities.unary_unary_inline(servicer.UpsertCertificate),
      ('zsearch.QueryService', 'UpsertCryptographicKey'): face_utilities.unary_unary_inline(servicer.UpsertCryptographicKey),
      ('zsearch.QueryService', 'UpsertRawCertificate'): face_utilities.unary_unary_inline(servicer.UpsertRawCertificate),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_QueryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('zsearch.QueryService', 'DelHostDomainRecord'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'DelHostIPv4Record'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetAllDomainRecords'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetAllIPv4Records'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetCertificate'): rpc__pb2.AnonymousQuery.SerializeToString,
      ('zsearch.QueryService', 'GetCryptographicKey'): rpc__pb2.AnonymousQuery.SerializeToString,
      ('zsearch.QueryService', 'GetHostDomainDelta'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetHostDomainRecord'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetHostIPv4Delta'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetHostIPv4Record'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetPublicLocation'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetRestrictedLocation'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetRootStore'): rpc__pb2.RootStoreQuery.SerializeToString,
      ('zsearch.QueryService', 'GetUserMetadata'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'GetWHOIS'): rpc__pb2.HostQuery.SerializeToString,
      ('zsearch.QueryService', 'PutHostDomainRecord'): hoststore__pb2.Record.SerializeToString,
      ('zsearch.QueryService', 'PutHostIPv4Record'): hoststore__pb2.Record.SerializeToString,
      ('zsearch.QueryService', 'PutUserMetadata'): hoststore__pb2.Record.SerializeToString,
      ('zsearch.QueryService', 'UpsertCertificate'): anonstore__pb2.AnonymousRecord.SerializeToString,
      ('zsearch.QueryService', 'UpsertCryptographicKey'): anonstore__pb2.AnonymousRecord.SerializeToString,
      ('zsearch.QueryService', 'UpsertRawCertificate'): anonstore__pb2.AnonymousRecord.SerializeToString,
    }
    response_deserializers = {
      ('zsearch.QueryService', 'DelHostDomainRecord'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'DelHostIPv4Record'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'GetAllDomainRecords'): rpc__pb2.HostQueryResponse.FromString,
      ('zsearch.QueryService', 'GetAllIPv4Records'): rpc__pb2.HostQueryResponse.FromString,
      ('zsearch.QueryService', 'GetCertificate'): rpc__pb2.AnonymousQueryResponse.FromString,
      ('zsearch.QueryService', 'GetCryptographicKey'): rpc__pb2.AnonymousQueryResponse.FromString,
      ('zsearch.QueryService', 'GetHostDomainDelta'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'GetHostDomainRecord'): rpc__pb2.HostQueryResponse.FromString,
      ('zsearch.QueryService', 'GetHostIPv4Delta'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'GetHostIPv4Record'): rpc__pb2.HostQueryResponse.FromString,
      ('zsearch.QueryService', 'GetPublicLocation'): hoststore__pb2.LocationAtom.FromString,
      ('zsearch.QueryService', 'GetRestrictedLocation'): hoststore__pb2.LocationAtom.FromString,
      ('zsearch.QueryService', 'GetRootStore'): rpc__pb2.RootStoreReply.FromString,
      ('zsearch.QueryService', 'GetUserMetadata'): hoststore__pb2.Record.FromString,
      ('zsearch.QueryService', 'GetWHOIS'): hoststore__pb2.Record.FromString,
      ('zsearch.QueryService', 'PutHostDomainRecord'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'PutHostIPv4Record'): hoststore__pb2.Delta.FromString,
      ('zsearch.QueryService', 'PutUserMetadata'): rpc__pb2.CommandReply.FromString,
      ('zsearch.QueryService', 'UpsertCertificate'): anonstore__pb2.AnonymousDelta.FromString,
      ('zsearch.QueryService', 'UpsertCryptographicKey'): anonstore__pb2.AnonymousDelta.FromString,
      ('zsearch.QueryService', 'UpsertRawCertificate'): anonstore__pb2.AnonymousDelta.FromString,
    }
    cardinalities = {
      'DelHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
      'DelHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
      'GetAllDomainRecords': cardinality.Cardinality.UNARY_UNARY,
      'GetAllIPv4Records': cardinality.Cardinality.UNARY_UNARY,
      'GetCertificate': cardinality.Cardinality.UNARY_UNARY,
      'GetCryptographicKey': cardinality.Cardinality.UNARY_UNARY,
      'GetHostDomainDelta': cardinality.Cardinality.UNARY_UNARY,
      'GetHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
      'GetHostIPv4Delta': cardinality.Cardinality.UNARY_UNARY,
      'GetHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
      'GetPublicLocation': cardinality.Cardinality.UNARY_UNARY,
      'GetRestrictedLocation': cardinality.Cardinality.UNARY_UNARY,
      'GetRootStore': cardinality.Cardinality.UNARY_UNARY,
      'GetUserMetadata': cardinality.Cardinality.UNARY_UNARY,
      'GetWHOIS': cardinality.Cardinality.UNARY_UNARY,
      'PutHostDomainRecord': cardinality.Cardinality.UNARY_UNARY,
      'PutHostIPv4Record': cardinality.Cardinality.UNARY_UNARY,
      'PutUserMetadata': cardinality.Cardinality.UNARY_UNARY,
      'UpsertCertificate': cardinality.Cardinality.UNARY_UNARY,
      'UpsertCryptographicKey': cardinality.Cardinality.UNARY_UNARY,
      'UpsertRawCertificate': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'zsearch.QueryService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
